--- apr/atomic/win32/apr_atomic.c	Fri Mar 25 09:45:00 2011
+++ apr/atomic/win32/apr_atomic.c	Thu Nov  7 12:58:06 2013
@@ -23,25 +23,6 @@ APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool
     return APR_SUCCESS;
 }
 
-/* 
- * Remapping function pointer type to accept apr_uint32_t's type-safely
- * as the arguments for as our apr_atomic_foo32 Functions
- */
-typedef WINBASEAPI apr_uint32_t (WINAPI * apr_atomic_win32_ptr_fn)
-    (apr_uint32_t volatile *);
-typedef WINBASEAPI apr_uint32_t (WINAPI * apr_atomic_win32_ptr_val_fn)
-    (apr_uint32_t volatile *, 
-     apr_uint32_t);
-typedef WINBASEAPI apr_uint32_t (WINAPI * apr_atomic_win32_ptr_val_val_fn)
-    (apr_uint32_t volatile *, 
-     apr_uint32_t, apr_uint32_t);
-typedef WINBASEAPI void * (WINAPI * apr_atomic_win32_ptr_ptr_ptr_fn)
-    (volatile void **, 
-     void *, const void *);
-typedef WINBASEAPI void * (WINAPI * apr_atomic_win32_ptr_ptr_fn)
-    (volatile void **,
-     void *);
-
 APR_DECLARE(apr_uint32_t) apr_atomic_add32(volatile apr_uint32_t *mem, apr_uint32_t val)
 {
 #if (defined(_M_IA64) || defined(_M_AMD64))
@@ -49,7 +30,7 @@ APR_DECLARE(apr_uint32_t) apr_atomic_add32(volatil
 #elif defined(__MINGW32__)
     return InterlockedExchangeAdd((long *)mem, val);
 #else
-    return ((apr_atomic_win32_ptr_val_fn)InterlockedExchangeAdd)(mem, val);
+    return InterlockedExchangeAdd(mem, val);
 #endif
 }
 
@@ -65,7 +46,7 @@ APR_DECLARE(void) apr_atomic_sub32(volatile apr_ui
 #elif defined(__MINGW32__)
     InterlockedExchangeAdd((long *)mem, -val);
 #else
-    ((apr_atomic_win32_ptr_val_fn)InterlockedExchangeAdd)(mem, -val);
+    InterlockedExchangeAdd(mem, -val);
 #endif
 }
 
@@ -77,7 +58,7 @@ APR_DECLARE(apr_uint32_t) apr_atomic_inc32(volatil
 #elif defined(__MINGW32__)
     return InterlockedIncrement((long *)mem) - 1;
 #else
-    return ((apr_atomic_win32_ptr_fn)InterlockedIncrement)(mem) - 1;
+    return InterlockedIncrement(mem) - 1;
 #endif
 }
 
@@ -88,7 +69,7 @@ APR_DECLARE(int) apr_atomic_dec32(volatile apr_uin
 #elif defined(__MINGW32__)
     return InterlockedDecrement((long *)mem);
 #else
-    return ((apr_atomic_win32_ptr_fn)InterlockedDecrement)(mem);
+    return InterlockedDecrement(mem);
 #endif
 }
 
@@ -99,7 +80,7 @@ APR_DECLARE(void) apr_atomic_set32(volatile apr_ui
 #elif defined(__MINGW32__)
     InterlockedExchange((long*)mem, val);
 #else
-    ((apr_atomic_win32_ptr_val_fn)InterlockedExchange)(mem, val);
+    InterlockedExchange(mem, val);
 #endif
 }
 
@@ -116,7 +97,7 @@ APR_DECLARE(apr_uint32_t) apr_atomic_cas32(volatil
 #elif defined(__MINGW32__)
     return InterlockedCompareExchange((long*)mem, with, cmp);
 #else
-    return ((apr_atomic_win32_ptr_val_val_fn)InterlockedCompareExchange)(mem, with, cmp);
+    return InterlockedCompareExchange(mem, with, cmp);
 #endif
 }
 
@@ -128,7 +109,7 @@ APR_DECLARE(void *) apr_atomic_casptr(volatile voi
     return InterlockedCompareExchangePointer((void**)mem, with, (void*)cmp);
 #else
     /* Too many VC6 users have stale win32 API files, stub this */
-    return ((apr_atomic_win32_ptr_ptr_ptr_fn)InterlockedCompareExchange)(mem, with, cmp);
+    return InterlockedCompareExchangePointer((void* volatile*)mem, with, (void*)cmp);
 #endif
 }
 
@@ -139,7 +120,7 @@ APR_DECLARE(apr_uint32_t) apr_atomic_xchg32(volati
 #elif defined(__MINGW32__)
     return InterlockedExchange((long *)mem, val);
 #else
-    return ((apr_atomic_win32_ptr_val_fn)InterlockedExchange)(mem, val);
+    return InterlockedExchange(mem, val);
 #endif
 }
 
@@ -149,6 +130,6 @@ APR_DECLARE(void*) apr_atomic_xchgptr(volatile voi
     return InterlockedExchangePointer((void**)mem, with);
 #else
     /* Too many VC6 users have stale win32 API files, stub this */
-    return ((apr_atomic_win32_ptr_ptr_fn)InterlockedExchange)(mem, with);
+    return InterlockedExchangePointer((void**)mem, with);
 #endif
 }
